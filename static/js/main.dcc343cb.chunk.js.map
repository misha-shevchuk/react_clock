{"version":3,"sources":["components/Clock.tsx","App.tsx","index.tsx"],"names":["Clock","state","time","Date","timerId","updateTime","setState","this","window","setInterval","console","info","toUTCString","slice","clearInterval","className","props","clockName","React","Component","getRandomName","value","now","toString","App","hasClock","handleNameChange","handleShowClock","handleHideClock","event","preventDefault","document","addEventListener","_","prevState","hasChanged","debug","removeEventListener","ReactDOM","render","getElementById"],"mappings":"sNAqBaA,EAAb,4MACEC,MAAQ,CACNC,KAAM,IAAIC,MAFd,EAKEC,QAAU,EALZ,EAuBEC,WAAa,WAGX,EAAKC,SAAS,CAAEJ,KAAM,IAAIC,QA1B9B,uDAOE,WAA2B,IAAD,OAGxBI,KAAKH,QAAUI,OAAOC,aAAY,kBAChC,EAAKJ,eAAe,OAX1B,gCAcE,WAEEK,QAAQC,KAAKJ,KAAKN,MAAMC,KAAKU,cAAcC,OAAO,IAAK,MAhB3D,kCAmBE,WACEL,OAAOM,cAAcP,KAAKH,WApB9B,oBA6BE,WACE,OACE,sBAAKW,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SACGR,KAAKS,MAAMC,YAGb,YAED,sBAAMF,UAAU,cAAhB,SACGR,KAAKN,MAAMC,KAAKU,cAAcC,OAAO,IAAK,YAvCrD,GAA2BK,IAAMC,WCjBjC,SAASC,IACP,IAAMC,EAAQlB,KAAKmB,MAAMC,WAAWV,OAAO,GAE3C,MAAM,SAAN,OAAgBQ,GAQX,IAAMG,EAAb,4MACEvB,MAAQ,CACNwB,UAAU,EACVR,UAAW,WAHf,EAMEb,QAAU,EANZ,EAkCEsB,iBAAmB,kBACjB,EAAKpB,SAAS,CAAEW,UAAWG,OAnC/B,EAsCEO,gBAAkB,WAChB,EAAKrB,SAAS,CAAEmB,UAAU,KAvC9B,EA0CEG,gBAAkB,SAACC,GACjBA,EAAMC,iBAEN,EAAKxB,SAAS,CAAEmB,UAAU,KA7C9B,uDAQE,WAA2B,IAAD,OACxBlB,KAAKH,QAAUI,OAAOC,aAAY,kBAChC,EAAKiB,qBAAqB,MAE5BK,SAASC,iBAAiB,QAASzB,KAAKoB,iBAExCI,SAASC,iBAAiB,cAAezB,KAAKqB,mBAdlD,gCAiBE,SAAmBK,EAAiBC,GAClC,MAAgC3B,KAAKN,MAA7BwB,EAAR,EAAQA,SAAUR,EAAlB,EAAkBA,UACZkB,EAAaD,EAAUjB,YAAcA,EAEvCQ,GAAYU,GAEdzB,QAAQ0B,MAAR,uBAA8BF,EAAUjB,UAAxC,eAAwDA,MAvB9D,kCA2BE,WACET,OAAOM,cAAcP,KAAKH,SAE1B2B,SAASM,oBAAoB,QAAS9B,KAAKoB,iBAC3CI,SAASM,oBAAoB,cAAe9B,KAAKqB,mBA/BrD,oBAgDE,WACE,MAAgCrB,KAAKN,MAA7BgB,EAAR,EAAQA,UAAWQ,EAAnB,EAAmBA,SAEnB,OACE,sBAAKV,UAAU,MAAf,UACE,6CAECU,GACC,cAAC,EAAD,CAAOR,UAAWA,WAxD5B,GAAyBC,IAAMC,WCZ/BmB,IAASC,OACP,cAAC,EAAD,IACAR,SAASS,eAAe,W","file":"static/js/main.dcc343cb.chunk.js","sourcesContent":["import React from 'react';\n\n// function to get local time in case we need to show current local time\n// (can't pass test with this function)\n\n// function getLocalTime() { // uncomment this function for local time\n//   const localTime = new Date();\n\n//   localTime.setHours(localTime.getHours() + 3);\n\n//   return localTime;\n// }\n\ntype Props = {\n  clockName: string,\n};\n\ntype State = {\n  time: Date,\n};\n\nexport class Clock extends React.Component<Props, State> {\n  state = {\n    time: new Date(),\n  };\n\n  timerId = 0;\n\n  componentDidMount(): void {\n    // this.setState({ time: getLocalTime() }); // uncomment this line and corresponding function for local time\n\n    this.timerId = window.setInterval(() => (\n      this.updateTime()), 1000);\n  }\n\n  componentDidUpdate(): void {\n    // eslint-disable-next-line no-console\n    console.info(this.state.time.toUTCString().slice(-12, -4));\n  }\n\n  componentWillUnmount(): void {\n    window.clearInterval(this.timerId);\n  }\n\n  updateTime = () => {\n    // this.setState({ time: getLocalTime() }); // uncomment this line and corresponding function for local time\n\n    this.setState({ time: new Date() }); // comment this line for local time\n  };\n\n  render(): React.ReactNode {\n    return (\n      <div className=\"Clock\">\n        <strong className=\"Clock__name\">\n          {this.props.clockName}\n        </strong>\n\n        {' time is '}\n\n        <span className=\"Clock__time\">\n          {this.state.time.toUTCString().slice(-12, -4)}\n        </span>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Clock } from './components/Clock';\n\nfunction getRandomName(): string {\n  const value = Date.now().toString().slice(-4);\n\n  return `Clock-${value}`;\n}\n\ntype State = {\n  hasClock: boolean;\n  clockName: string;\n};\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    hasClock: true,\n    clockName: 'Clock-0',\n  };\n\n  timerId = 0;\n\n  componentDidMount(): void {\n    this.timerId = window.setInterval(() => (\n      this.handleNameChange()), 3300);\n\n    document.addEventListener('click', this.handleShowClock);\n\n    document.addEventListener('contextmenu', this.handleHideClock);\n  }\n\n  componentDidUpdate(_: Readonly<{}>, prevState: Readonly<State>): void {\n    const { hasClock, clockName } = this.state;\n    const hasChanged = prevState.clockName !== clockName;\n\n    if (hasClock && hasChanged) {\n      // eslint-disable-next-line no-console\n      console.debug(`Renamed from ${prevState.clockName} to ${clockName}`);\n    }\n  }\n\n  componentWillUnmount(): void {\n    window.clearInterval(this.timerId);\n\n    document.removeEventListener('click', this.handleShowClock);\n    document.removeEventListener('contextmenu', this.handleHideClock);\n  }\n\n  handleNameChange = () => (\n    this.setState({ clockName: getRandomName() })\n  );\n\n  handleShowClock = () => {\n    this.setState({ hasClock: true });\n  };\n\n  handleHideClock = (event: MouseEvent) => {\n    event.preventDefault();\n\n    this.setState({ hasClock: false });\n  };\n\n  render(): React.ReactNode {\n    const { clockName, hasClock } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n\n        {hasClock && (\n          <Clock clockName={clockName} />\n        )}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}